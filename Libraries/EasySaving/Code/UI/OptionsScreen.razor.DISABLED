@using Sandbox;
@using Sandbox.Audio;
@using Sandbox.UI;
@using Sandbox.Services;
@using System;
@inherits PanelComponent

<root class="menu">
    <div class="container">
        <div class="title">
            <span>Options</span>
        </div>
        <div class="content tabs-container">
            <div class="tabs-group">
                @foreach (var tab in UITab.all)
                {
                    <div class="button">
                        <div class="button red" onclick="@(() => activeTab = tab)">
                            @tab.tabName
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="content" CanDragScroll="false">
            <div class="table">
                @foreach (var group in activeTab.groups)
                {
                    <div class="row title">
                        <div class="label">@group.groupName</div>
                    </div>

                    foreach (var element in group.elements)
                    {
                        var elementType = element.GetType();

                        <div class="row setting">
                            <div class="column key">
                                <div class="label">@element.displayName:</div>
                            </div>

                            @if (element is UIToggle)
                            {
                                var toggleElement = (UIToggle)element;
                                <div class="column value">
                                    <div class="buttons">
                                        <div class="button @GetToggleColor(true, toggleElement.getter())" onclick="@(() => toggleElement.setter(false))">Off</div>
                                        <div class="button @GetToggleColor(false, toggleElement.getter())" onclick="@(() => toggleElement.setter(true))">On</div>
                                    </div>
                                </div>
                            }
                            @if (element is UISlider)
                            {
                                var sliderElement = (UISlider)element;
                                <div class="column value">
                                    <div class="slider">
                                        <SliderControl Value="@(sliderElement.getter())" OnValueChanged="@(sliderElement.setter)" Min="@(sliderElement.min)" Max="@(sliderElement.max)" Step="@(sliderElement.step)"></SliderControl>
                                    </div>
                                </div>
                            }
                            @if (element is UIDropDownBase)
                            {
                                <div class="column value">
                                    <div class="cycling-selector">
                                        <div class="cycling-controls">
                                            <button class="arrow left" onclick="cycleLeft()">&#8249;</button>
                                            <span class="value" id="current-value">Normal</span>
                                            <button class="arrow right" onclick="cycleRight()">&#8250;</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
        <div class="buttons">
            <div class="button">
                <div class="button red" onclick="@(() => ButtonClose())">
                    Close
                </div>
            </div>
        </div>
    </div>
</root>

@code
{
    public static string GetToggleColor(bool isOff, bool value)
    {
        if (isOff)
        {
            return value ? "gray" : "red";
        }
        return value ? "green" : "gray";
    }

    public UITab activeTab { get; set; }

    protected override void OnStart()
    {
        base.OnStart();

        if (UITab.all != null)
        {
            UITab.all.Sort((t1,t2) => t1.order.CompareTo(t2.order));

            if (UITab.all.Count > 0)
            {
                activeTab = UITab.all[0];
            }
        }
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        if (!HasClass("visible"))
            return;

        if (Input.EscapePressed)
        {
            Input.EscapePressed = false;
            ButtonClose();
        }
    }

    /*[ConCmd("open_options")]
    static void OpenOptions()
    {
        this.Enabled = false;
    }*/

    void ButtonClose()
    {
        var soundHandle = Sound.Play("ui.navigate.back");
        soundHandle.TargetMixer = Mixer.FindMixerByName("UI");
        this.Enabled = false;
    }

    /// <summary>
    /// update every second
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(RealTime.Now.CeilToInt());
}
